{
  "hash": "d79310350ace05ff7c65358f4c33391f",
  "result": {
    "markdown": "---\ntitle: Anomaly / Outlier Detection\nauthor: Hangyul Kim\ndate: 11/28/2023\nimage: detection.png\nformat:\n  html:\n    code-fold: false\n---\n\nIn Machine Learning field, Anomaly detection and Outlier Detection are used during the Data Understanding and Data Pre-processing stages. They are used in wide range of field such as credit card, insurance, or even in military field.\n\n\n### Anomaly Detection\n\nAnomalies are reffered as the data points that do not conforrm to an expected pattern of other data points. So, the anomalies can be defined as weird data points comparing with the others.\n\nAnomalies might be occured for a various reasons such as malicious activity, cyber-intrusion, or breakdown of system. Since they occur not in common situation, it would be pretty interesting to analyse anomalies point.\n\nTherefore, Anomaly detection refers to the way of finding patterns in data that contains such anomalies.\n\n### Outlier Detection\n\nOutlier is a rare chance of occurrence within the dataset. The Outlier is an observation point that is far from the others. It may indicate experimental error in the dataset. Outlier should be the most extream point like minimum or maximum, or both of them.\n\nTherefore, Outlier detection refers to the way of finding a data that is far from the others.\n\n#### Anomaly vs Outlier\n\n![detection.png](detection.png)\n\nAs seen above, Anomalies are treated as pattern although Outlier is only a data point.\n\n### Anomaly / Outlier Detection in Support Vector Machine\n\nThe Support Vector Machine (SVM) is a supervised machine learning used in classification. SVM trains the dataset with two categories. An algorithm of SVM assigns a new input into one of these categories.\n\nSince SVM model check the range of each category, anomalies can be determined by checking the points outside of the range.\n\n#### Importing the libraries and dataset\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\ndata = pd.read_csv(\"../dataset/iris.csv\")\ndf = data[[\"sepal_length\", \"sepal_width\"]]\nprint(df.describe())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       sepal_length  sepal_width\ncount    150.000000   150.000000\nmean       5.843333     3.054000\nstd        0.828066     0.433594\nmin        4.300000     2.000000\n25%        5.100000     2.800000\n50%        5.800000     3.000000\n75%        6.400000     3.300000\nmax        7.900000     4.400000\n```\n:::\n:::\n\n\n#### Training and Predict model\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom sklearn.svm import OneClassSVM\n\nmodel = OneClassSVM(kernel='rbf', gamma=0.001, nu=0.05).fit(df)\ny_pred = model.predict(df)\n```\n:::\n\n\nHere, parameter 'nu' in OneClassSVM refers the estimated proportion of outliers in this data. So, in this dataset, we predict 5% of the data gonna be anomalies.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nanomalies = df.iloc[np.where(y_pred == -1)]\nanomalies\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sepal_length</th>\n      <th>sepal_width</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8</th>\n      <td>4.4</td>\n      <td>2.9</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>4.3</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>4.5</td>\n      <td>2.3</td>\n    </tr>\n    <tr>\n      <th>117</th>\n      <td>7.7</td>\n      <td>3.8</td>\n    </tr>\n    <tr>\n      <th>118</th>\n      <td>7.7</td>\n      <td>2.6</td>\n    </tr>\n    <tr>\n      <th>131</th>\n      <td>7.9</td>\n      <td>3.8</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Visualising the results\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nplt.scatter(df[\"sepal_length\"], df[\"sepal_width\"])\nplt.scatter(anomalies[\"sepal_length\"], anomalies[\"sepal_width\"], c=\"r\")\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<matplotlib.collections.PathCollection at 0x208dcc18ac0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Detection_files/figure-html/cell-5-output-2.png){width=571 height=413}\n:::\n:::\n\n\nHere. the red dots among the blue dots represent anomalies in this dataset. Since we predict 5% of dataset into anomalies, only 5 data points seems to be red.\n\n",
    "supporting": [
      "Detection_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}